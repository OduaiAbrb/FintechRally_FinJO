{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oduai\\\\OneDrive\\\\Documents\\\\GitHub\\\\Fintech-Rally-ASU-\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is logged in on app load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      api.defaults.headers.Authorization = `Bearer ${token}`;\n      // Verify token is still valid\n      fetchUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchUser = async () => {\n    try {\n      const response = await api.get('/auth/me');\n      setUser(response.data);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        access_token,\n        user: userData\n      } = response.data;\n\n      // Store token in localStorage\n      localStorage.setItem('token', access_token);\n\n      // Set default Authorization header\n      api.defaults.headers.Authorization = `Bearer ${access_token}`;\n      setUser(userData);\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/register', userData);\n      const {\n        access_token,\n        user: newUser\n      } = response.data;\n\n      // Store token in localStorage\n      localStorage.setItem('token', access_token);\n\n      // Set default Authorization header\n      api.defaults.headers.Authorization = `Bearer ${access_token}`;\n      setUser(newUser);\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.Authorization;\n    setUser(null);\n    setError(null);\n  };\n  const clearError = () => {\n    setError(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    clearError,\n    fetchUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","defaults","headers","Authorization","fetchUser","response","get","data","console","logout","login","email","password","post","access_token","userData","setItem","success","_error$response","_error$response$data","errorMessage","detail","register","newUser","_error$response2","_error$response2$data","removeItem","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/oduai/OneDrive/Documents/GitHub/Fintech-Rally-ASU-/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { api } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is logged in on app load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      api.defaults.headers.Authorization = `Bearer ${token}`;\r\n      // Verify token is still valid\r\n      fetchUser();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchUser = async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      setUser(response.data);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await api.post('/auth/login', {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      const { access_token, user: userData } = response.data;\r\n      \r\n      // Store token in localStorage\r\n      localStorage.setItem('token', access_token);\r\n      \r\n      // Set default Authorization header\r\n      api.defaults.headers.Authorization = `Bearer ${access_token}`;\r\n      \r\n      setUser(userData);\r\n      return { success: true, user: userData };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.detail || 'Login failed';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await api.post('/auth/register', userData);\r\n      \r\n      const { access_token, user: newUser } = response.data;\r\n      \r\n      // Store token in localStorage\r\n      localStorage.setItem('token', access_token);\r\n      \r\n      // Set default Authorization header\r\n      api.defaults.headers.Authorization = `Bearer ${access_token}`;\r\n      \r\n      setUser(newUser);\r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.detail || 'Registration failed';\r\n      setError(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete api.defaults.headers.Authorization;\r\n    setUser(null);\r\n    setError(null);\r\n  };\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    fetchUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}