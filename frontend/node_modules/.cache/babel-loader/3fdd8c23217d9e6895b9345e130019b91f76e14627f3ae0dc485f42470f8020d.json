{"ast":null,"code":"import api from './api';\nconst securityApi = {\n  // Security System Management\n  initializeSecurity: () => api.post('/security/initialize'),\n  getSecurityStatus: () => api.get('/security/status'),\n  // AML System\n  initializeAML: () => api.post('/aml/initialize'),\n  getAMLDashboard: () => api.get('/aml/dashboard'),\n  getAMLAlerts: (filters = {}) => api.get('/aml/alerts', {\n    params: filters\n  }),\n  resolveAMLAlert: (alertId, resolutionData) => api.post(`/aml/alerts/${alertId}/resolve`, resolutionData),\n  getUserRiskProfile: userId => api.get(`/aml/user-risk/${userId}`),\n  // Biometric Authentication\n  enrollBiometric: biometricData => api.post('/biometric/enroll', biometricData),\n  authenticateBiometric: biometricData => api.post('/biometric/authenticate', biometricData),\n  getUserBiometrics: async (userId = null) => {\n    try {\n      if (userId) {\n        return api.get(`/biometric/user/${userId}`);\n      }\n      // Get current user's ID from token and use it\n      const profileResponse = await api.get('/user/profile');\n      const currentUserId = profileResponse.data.user_info.id;\n      return api.get(`/biometric/user/${currentUserId}`);\n    } catch (error) {\n      // If profile call fails, return empty biometrics\n      return {\n        data: {\n          biometrics: []\n        }\n      };\n    }\n  },\n  revokeBiometric: templateId => api.delete(`/biometric/revoke/${templateId}`),\n  getBiometricHistory: (limit = 50) => api.get('/biometric/history', {\n    params: {\n      limit\n    }\n  }),\n  // Risk Scoring\n  getRiskAssessment: (userId, transactionData = null) => api.get(`/risk/assessment/${userId}`, {\n    params: {\n      transaction_data: transactionData\n    }\n  }),\n  getRiskHistory: (userId, limit = 10) => api.get(`/risk/history/${userId}`, {\n    params: {\n      limit\n    }\n  }),\n  getRiskDashboard: () => api.get('/risk/dashboard'),\n  // Enhanced Authentication\n  enhancedLogin: loginData => api.post('/auth/login-enhanced', loginData),\n  // Utility Functions\n  generateDeviceFingerprint: () => {\n    // Generate a simple device fingerprint based on browser characteristics\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    ctx.textBaseline = 'top';\n    ctx.font = '14px Arial';\n    ctx.fillText('Device fingerprint', 2, 2);\n\n    // Simple hash function\n    let hash = 0;\n    for (let i = 0; i < fingerprint.length; i++) {\n      const char = fingerprint.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16);\n  },\n  // Mock biometric data generation for demo purposes\n  generateMockFaceData: () => {\n    // Generate mock base64 image data for face recognition\n    return btoa(\"mock_face_image_data_\" + Date.now());\n  },\n  generateMockFingerprintData: () => {\n    // Generate mock WebAuthn credential data\n    return JSON.stringify({\n      id: \"mock_credential_\" + Date.now(),\n      response: {\n        publicKey: btoa(\"mock_public_key_data\"),\n        clientDataJSON: btoa(JSON.stringify({\n          type: \"webauthn.create\",\n          challenge: btoa(\"mock_challenge\"),\n          origin: window.location.origin\n        }))\n      }\n    });\n  }\n};\nexport { securityApi };","map":{"version":3,"names":["api","securityApi","initializeSecurity","post","getSecurityStatus","get","initializeAML","getAMLDashboard","getAMLAlerts","filters","params","resolveAMLAlert","alertId","resolutionData","getUserRiskProfile","userId","enrollBiometric","biometricData","authenticateBiometric","getUserBiometrics","profileResponse","currentUserId","data","user_info","id","error","biometrics","revokeBiometric","templateId","delete","getBiometricHistory","limit","getRiskAssessment","transactionData","transaction_data","getRiskHistory","getRiskDashboard","enhancedLogin","loginData","generateDeviceFingerprint","canvas","document","createElement","ctx","getContext","textBaseline","font","fillText","hash","i","fingerprint","length","char","charCodeAt","Math","abs","toString","generateMockFaceData","btoa","Date","now","generateMockFingerprintData","JSON","stringify","response","publicKey","clientDataJSON","type","challenge","origin","window","location"],"sources":["C:/Users/oduai/OneDrive/Documents/GitHub/Fintech-Rally-ASU-/frontend/src/services/securityApi.js"],"sourcesContent":["import api from './api';\r\n\r\nconst securityApi = {\r\n  // Security System Management\r\n  initializeSecurity: () => \r\n    api.post('/security/initialize'),\r\n    \r\n  getSecurityStatus: () => \r\n    api.get('/security/status'),\r\n\r\n  // AML System\r\n  initializeAML: () => \r\n    api.post('/aml/initialize'),\r\n    \r\n  getAMLDashboard: () => \r\n    api.get('/aml/dashboard'),\r\n    \r\n  getAMLAlerts: (filters = {}) => \r\n    api.get('/aml/alerts', { params: filters }),\r\n    \r\n  resolveAMLAlert: (alertId, resolutionData) => \r\n    api.post(`/aml/alerts/${alertId}/resolve`, resolutionData),\r\n    \r\n  getUserRiskProfile: (userId) => \r\n    api.get(`/aml/user-risk/${userId}`),\r\n\r\n  // Biometric Authentication\r\n  enrollBiometric: (biometricData) => \r\n    api.post('/biometric/enroll', biometricData),\r\n    \r\n  authenticateBiometric: (biometricData) => \r\n    api.post('/biometric/authenticate', biometricData),\r\n    \r\n  getUserBiometrics: async (userId = null) => {\r\n    try {\r\n      if (userId) {\r\n        return api.get(`/biometric/user/${userId}`);\r\n      }\r\n      // Get current user's ID from token and use it\r\n      const profileResponse = await api.get('/user/profile');\r\n      const currentUserId = profileResponse.data.user_info.id;\r\n      return api.get(`/biometric/user/${currentUserId}`);\r\n    } catch (error) {\r\n      // If profile call fails, return empty biometrics\r\n      return { data: { biometrics: [] } };\r\n    }\r\n  },\r\n    \r\n  revokeBiometric: (templateId) => \r\n    api.delete(`/biometric/revoke/${templateId}`),\r\n    \r\n  getBiometricHistory: (limit = 50) => \r\n    api.get('/biometric/history', { params: { limit } }),\r\n\r\n  // Risk Scoring\r\n  getRiskAssessment: (userId, transactionData = null) => \r\n    api.get(`/risk/assessment/${userId}`, { params: { transaction_data: transactionData } }),\r\n    \r\n  getRiskHistory: (userId, limit = 10) => \r\n    api.get(`/risk/history/${userId}`, { params: { limit } }),\r\n    \r\n  getRiskDashboard: () => \r\n    api.get('/risk/dashboard'),\r\n\r\n  // Enhanced Authentication\r\n  enhancedLogin: (loginData) => \r\n    api.post('/auth/login-enhanced', loginData),\r\n\r\n  // Utility Functions\r\n  generateDeviceFingerprint: () => {\r\n    // Generate a simple device fingerprint based on browser characteristics\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.textBaseline = 'top';\r\n    ctx.font = '14px Arial';\r\n    ctx.fillText('Device fingerprint', 2, 2);\r\n    \r\n    \r\n    // Simple hash function\r\n    let hash = 0;\r\n    for (let i = 0; i < fingerprint.length; i++) {\r\n      const char = fingerprint.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    \r\n    return Math.abs(hash).toString(16);\r\n  },\r\n\r\n  // Mock biometric data generation for demo purposes\r\n  generateMockFaceData: () => {\r\n    // Generate mock base64 image data for face recognition\r\n    return btoa(\"mock_face_image_data_\" + Date.now());\r\n  },\r\n\r\n  generateMockFingerprintData: () => {\r\n    // Generate mock WebAuthn credential data\r\n    return JSON.stringify({\r\n      id: \"mock_credential_\" + Date.now(),\r\n      response: {\r\n        publicKey: btoa(\"mock_public_key_data\"),\r\n        clientDataJSON: btoa(JSON.stringify({\r\n          type: \"webauthn.create\",\r\n          challenge: btoa(\"mock_challenge\"),\r\n          origin: window.location.origin\r\n        }))\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport { securityApi };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}