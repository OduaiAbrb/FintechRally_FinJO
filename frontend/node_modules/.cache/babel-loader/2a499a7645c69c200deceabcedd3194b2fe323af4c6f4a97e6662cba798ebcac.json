{"ast":null,"code":"// import api from './api';\n\n// const securityApi = {\n//   // Security System Management\n//   initializeSecurity: () => \n//     api.post('/security/initialize'),\n\n//   getSecurityStatus: () => \n//     api.get('/security/status'),\n\n//   // AML System\n//   initializeAML: () => \n//     api.post('/aml/initialize'),\n\n//   getAMLDashboard: () => \n//     api.get('/aml/dashboard'),\n\n//   getAMLAlerts: (filters = {}) => \n//     api.get('/aml/alerts', { params: filters }),\n\n//   resolveAMLAlert: (alertId, resolutionData) => \n//     api.post(`/aml/alerts/${alertId}/resolve`, resolutionData),\n\n//   getUserRiskProfile: (userId) => \n//     api.get(`/aml/user-risk/${userId}`),\n\n//   // Biometric Authentication\n//   enrollBiometric: (biometricData) => \n//     api.post('/biometric/enroll', biometricData),\n\n//   authenticateBiometric: (biometricData) => \n//     api.post('/biometric/authenticate', biometricData),\n\n//   getUserBiometrics: async (userId = null) => {\n//     try {\n//       if (userId) {\n//         return api.get(`/biometric/user/${userId}`);\n//       }\n//       // Get current user's ID from token and use it\n//       const profileResponse = await api.get('/user/profile');\n//       const currentUserId = profileResponse.data.user_info.id;\n//       return api.get(`/biometric/user/${currentUserId}`);\n//     } catch (error) {\n//       // If profile call fails, return empty biometrics\n//       return { data: { biometrics: [] } };\n//     }\n//   },\n\n//   revokeBiometric: (templateId) => \n//     api.delete(`/biometric/revoke/${templateId}`),\n\n//   getBiometricHistory: (limit = 50) => \n//     api.get('/biometric/history', { params: { limit } }),\n\n//   // Risk Scoring\n//   getRiskAssessment: (userId, transactionData = null) => \n//     api.get(`/risk/assessment/${userId}`, { params: { transaction_data: transactionData } }),\n\n//   getRiskHistory: (userId, limit = 10) => \n//     api.get(`/risk/history/${userId}`, { params: { limit } }),\n\n//   getRiskDashboard: () => \n//     api.get('/risk/dashboard'),\n\n//   // Enhanced Authentication\n//   enhancedLogin: (loginData) => \n//     api.post('/auth/login-enhanced', loginData),\n\n//   // Utility Functions\n//   generateDeviceFingerprint: () => {\n//     // Generate a simple device fingerprint based on browser characteristics\n//     const canvas = document.createElement('canvas');\n//     const ctx = canvas.getContext('2d');\n//     ctx.textBaseline = 'top';\n//     ctx.font = '14px Arial';\n//     ctx.fillText('Device fingerprint', 2, 2);\n\n//     const fingerprint = [\n//       navigator.userAgent,\n//       navigator.language,\n//       screen.width + 'x' + screen.height,\n//       new Date().getTimezoneOffset(),\n//       canvas.toDataURL()\n//     ].join('|');\n\n//     // Simple hash function\n//     let hash = 0;\n//     for (let i = 0; i < fingerprint.length; i++) {\n//       const char = fingerprint.charCodeAt(i);\n//       hash = ((hash << 5) - hash) + char;\n//       hash = hash & hash; // Convert to 32-bit integer\n//     }\n\n//     return Math.abs(hash).toString(16);\n//   },\n\n//   // Mock biometric data generation for demo purposes\n//   generateMockFaceData: () => {\n//     // Generate mock base64 image data for face recognition\n//     return btoa(\"mock_face_image_data_\" + Date.now());\n//   },\n\n//   generateMockFingerprintData: () => {\n//     // Generate mock WebAuthn credential data\n//     return JSON.stringify({\n//       id: \"mock_credential_\" + Date.now(),\n//       response: {\n//         publicKey: btoa(\"mock_public_key_data\"),\n//         clientDataJSON: btoa(JSON.stringify({\n//           type: \"webauthn.create\",\n//           challenge: btoa(\"mock_challenge\"),\n//           origin: window.location.origin\n//         }))\n//       }\n//     });\n//   }\n// };\n\n// export { securityApi };","map":{"version":3,"names":[],"sources":["C:/Users/oduai/OneDrive/Documents/GitHub/Fintech-Rally-ASU-/frontend/src/services/securityApi.js"],"sourcesContent":["// import api from './api';\r\n\r\n// const securityApi = {\r\n//   // Security System Management\r\n//   initializeSecurity: () => \r\n//     api.post('/security/initialize'),\r\n  \r\n//   getSecurityStatus: () => \r\n//     api.get('/security/status'),\r\n\r\n//   // AML System\r\n//   initializeAML: () => \r\n//     api.post('/aml/initialize'),\r\n  \r\n//   getAMLDashboard: () => \r\n//     api.get('/aml/dashboard'),\r\n  \r\n//   getAMLAlerts: (filters = {}) => \r\n//     api.get('/aml/alerts', { params: filters }),\r\n  \r\n//   resolveAMLAlert: (alertId, resolutionData) => \r\n//     api.post(`/aml/alerts/${alertId}/resolve`, resolutionData),\r\n  \r\n//   getUserRiskProfile: (userId) => \r\n//     api.get(`/aml/user-risk/${userId}`),\r\n\r\n//   // Biometric Authentication\r\n//   enrollBiometric: (biometricData) => \r\n//     api.post('/biometric/enroll', biometricData),\r\n  \r\n//   authenticateBiometric: (biometricData) => \r\n//     api.post('/biometric/authenticate', biometricData),\r\n  \r\n//   getUserBiometrics: async (userId = null) => {\r\n//     try {\r\n//       if (userId) {\r\n//         return api.get(`/biometric/user/${userId}`);\r\n//       }\r\n//       // Get current user's ID from token and use it\r\n//       const profileResponse = await api.get('/user/profile');\r\n//       const currentUserId = profileResponse.data.user_info.id;\r\n//       return api.get(`/biometric/user/${currentUserId}`);\r\n//     } catch (error) {\r\n//       // If profile call fails, return empty biometrics\r\n//       return { data: { biometrics: [] } };\r\n//     }\r\n//   },\r\n  \r\n//   revokeBiometric: (templateId) => \r\n//     api.delete(`/biometric/revoke/${templateId}`),\r\n  \r\n//   getBiometricHistory: (limit = 50) => \r\n//     api.get('/biometric/history', { params: { limit } }),\r\n\r\n//   // Risk Scoring\r\n//   getRiskAssessment: (userId, transactionData = null) => \r\n//     api.get(`/risk/assessment/${userId}`, { params: { transaction_data: transactionData } }),\r\n  \r\n//   getRiskHistory: (userId, limit = 10) => \r\n//     api.get(`/risk/history/${userId}`, { params: { limit } }),\r\n  \r\n//   getRiskDashboard: () => \r\n//     api.get('/risk/dashboard'),\r\n\r\n//   // Enhanced Authentication\r\n//   enhancedLogin: (loginData) => \r\n//     api.post('/auth/login-enhanced', loginData),\r\n\r\n//   // Utility Functions\r\n//   generateDeviceFingerprint: () => {\r\n//     // Generate a simple device fingerprint based on browser characteristics\r\n//     const canvas = document.createElement('canvas');\r\n//     const ctx = canvas.getContext('2d');\r\n//     ctx.textBaseline = 'top';\r\n//     ctx.font = '14px Arial';\r\n//     ctx.fillText('Device fingerprint', 2, 2);\r\n  \r\n//     const fingerprint = [\r\n//       navigator.userAgent,\r\n//       navigator.language,\r\n//       screen.width + 'x' + screen.height,\r\n//       new Date().getTimezoneOffset(),\r\n//       canvas.toDataURL()\r\n//     ].join('|');\r\n  \r\n//     // Simple hash function\r\n//     let hash = 0;\r\n//     for (let i = 0; i < fingerprint.length; i++) {\r\n//       const char = fingerprint.charCodeAt(i);\r\n//       hash = ((hash << 5) - hash) + char;\r\n//       hash = hash & hash; // Convert to 32-bit integer\r\n//     }\r\n  \r\n//     return Math.abs(hash).toString(16);\r\n//   },\r\n\r\n//   // Mock biometric data generation for demo purposes\r\n//   generateMockFaceData: () => {\r\n//     // Generate mock base64 image data for face recognition\r\n//     return btoa(\"mock_face_image_data_\" + Date.now());\r\n//   },\r\n\r\n//   generateMockFingerprintData: () => {\r\n//     // Generate mock WebAuthn credential data\r\n//     return JSON.stringify({\r\n//       id: \"mock_credential_\" + Date.now(),\r\n//       response: {\r\n//         publicKey: btoa(\"mock_public_key_data\"),\r\n//         clientDataJSON: btoa(JSON.stringify({\r\n//           type: \"webauthn.create\",\r\n//           challenge: btoa(\"mock_challenge\"),\r\n//           origin: window.location.origin\r\n//         }))\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export { securityApi };"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}