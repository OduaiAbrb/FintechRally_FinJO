{"ast":null,"code":"// Utility functions for formatting data\n\nexport const formatCurrency = (amount, currency = 'JD') => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency === 'JD' ? 'USD' : 'USD',\n    // Using USD as proxy for JD\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  if (currency === 'JD') {\n    return formatter.format(amount).replace('$', 'JD ');\n  } else if (currency === 'STABLECOIN') {\n    return formatter.format(amount).replace('$', 'SC ');\n  }\n  return formatter.format(amount);\n};\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatDateShort = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric'\n  });\n};\nexport const formatTime = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatTransactionType = type => {\n  const types = {\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    exchange: 'Exchange'\n  };\n  return types[type] || type;\n};\nexport const formatTransactionStatus = status => {\n  const statuses = {\n    pending: 'Pending',\n    completed: 'Completed',\n    failed: 'Failed'\n  };\n  return statuses[status] || status;\n};\nexport const getTransactionIcon = type => {\n  const icons = {\n    deposit: '↗',\n    withdrawal: '↙',\n    transfer: '↔',\n    exchange: '⇄'\n  };\n  return icons[type] || '•';\n};\nexport const getTransactionColor = type => {\n  const colors = {\n    deposit: 'text-green-600',\n    withdrawal: 'text-red-600',\n    transfer: 'text-blue-600',\n    exchange: 'text-yellow-600'\n  };\n  return colors[type] || 'text-gray-600';\n};\nexport const getStatusColor = status => {\n  const colors = {\n    completed: 'bg-green-100 text-green-800',\n    pending: 'bg-yellow-100 text-yellow-800',\n    failed: 'bg-red-100 text-red-800'\n  };\n  return colors[status] || 'bg-gray-100 text-gray-800';\n};\nexport const truncateString = (str, length = 20) => {\n  if (str.length <= length) return str;\n  return str.substring(0, length) + '...';\n};\nexport const formatPhoneNumber = phoneNumber => {\n  if (!phoneNumber) return '';\n\n  // Remove all non-digit characters\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n\n  // Format as +962 XX XXX XXXX for Jordan\n  if (cleaned.startsWith('962')) {\n    return `+${cleaned.substring(0, 3)} ${cleaned.substring(3, 5)} ${cleaned.substring(5, 8)} ${cleaned.substring(8)}`;\n  }\n  return phoneNumber;\n};\nexport const validateEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\nexport const validatePhoneNumber = phoneNumber => {\n  const phoneRegex = /^(\\+962|962|0)?[0-9]{9}$/;\n  return phoneRegex.test(phoneNumber.replace(/\\s/g, ''));\n};\nexport const formatBalance = balance => {\n  if (balance >= 1000000) {\n    return (balance / 1000000).toFixed(1) + 'M';\n  } else if (balance >= 1000) {\n    return (balance / 1000).toFixed(1) + 'K';\n  }\n  return balance.toFixed(2);\n};\nexport const calculatePercentageChange = (current, previous) => {\n  if (previous === 0) return 0;\n  return (current - previous) / previous * 100;\n};\nexport const getTimeAgo = dateString => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now - date) / 1000);\n  if (diffInSeconds < 60) {\n    return 'Just now';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  } else {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days} day${days > 1 ? 's' : ''} ago`;\n  }\n};\nexport const generateTransactionId = () => {\n  return 'TXN_' + Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n};\nexport const formatNumber = (number, decimals = 2) => {\n  return Number(number).toLocaleString('en-US', {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  });\n};","map":{"version":3,"names":["formatCurrency","amount","currency","formatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","replace","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","formatDateShort","formatTime","toLocaleTimeString","formatTransactionType","type","types","deposit","withdrawal","transfer","exchange","formatTransactionStatus","status","statuses","pending","completed","failed","getTransactionIcon","icons","getTransactionColor","colors","getStatusColor","truncateString","str","length","substring","formatPhoneNumber","phoneNumber","cleaned","startsWith","validateEmail","email","emailRegex","test","validatePhoneNumber","phoneRegex","formatBalance","balance","toFixed","calculatePercentageChange","current","previous","getTimeAgo","now","diffInSeconds","Math","floor","minutes","hours","days","generateTransactionId","toString","random","substr","formatNumber","number","decimals","Number","toLocaleString"],"sources":["C:/Users/oduai/OneDrive/Documents/GitHub/Fintech-Rally-ASU-/frontend/src/utils/format.js"],"sourcesContent":["// Utility functions for formatting data\r\n\r\nexport const formatCurrency = (amount, currency = 'JD') => {\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: currency === 'JD' ? 'USD' : 'USD', // Using USD as proxy for JD\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  });\r\n  \r\n  if (currency === 'JD') {\r\n    return formatter.format(amount).replace('$', 'JD ');\r\n  } else if (currency === 'STABLECOIN') {\r\n    return formatter.format(amount).replace('$', 'SC ');\r\n  }\r\n  \r\n  return formatter.format(amount);\r\n};\r\n\r\nexport const formatDate = (dateString) => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  });\r\n};\r\n\r\nexport const formatDateShort = (dateString) => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString('en-US', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n  });\r\n};\r\n\r\nexport const formatTime = (dateString) => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleTimeString('en-US', {\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  });\r\n};\r\n\r\nexport const formatTransactionType = (type) => {\r\n  const types = {\r\n    deposit: 'Deposit',\r\n    withdrawal: 'Withdrawal',\r\n    transfer: 'Transfer',\r\n    exchange: 'Exchange',\r\n  };\r\n  return types[type] || type;\r\n};\r\n\r\nexport const formatTransactionStatus = (status) => {\r\n  const statuses = {\r\n    pending: 'Pending',\r\n    completed: 'Completed',\r\n    failed: 'Failed',\r\n  };\r\n  return statuses[status] || status;\r\n};\r\n\r\nexport const getTransactionIcon = (type) => {\r\n  const icons = {\r\n    deposit: '↗',\r\n    withdrawal: '↙',\r\n    transfer: '↔',\r\n    exchange: '⇄',\r\n  };\r\n  return icons[type] || '•';\r\n};\r\n\r\nexport const getTransactionColor = (type) => {\r\n  const colors = {\r\n    deposit: 'text-green-600',\r\n    withdrawal: 'text-red-600',\r\n    transfer: 'text-blue-600',\r\n    exchange: 'text-yellow-600',\r\n  };\r\n  return colors[type] || 'text-gray-600';\r\n};\r\n\r\nexport const getStatusColor = (status) => {\r\n  const colors = {\r\n    completed: 'bg-green-100 text-green-800',\r\n    pending: 'bg-yellow-100 text-yellow-800',\r\n    failed: 'bg-red-100 text-red-800',\r\n  };\r\n  return colors[status] || 'bg-gray-100 text-gray-800';\r\n};\r\n\r\nexport const truncateString = (str, length = 20) => {\r\n  if (str.length <= length) return str;\r\n  return str.substring(0, length) + '...';\r\n};\r\n\r\nexport const formatPhoneNumber = (phoneNumber) => {\r\n  if (!phoneNumber) return '';\r\n  \r\n  // Remove all non-digit characters\r\n  const cleaned = phoneNumber.replace(/\\D/g, '');\r\n  \r\n  // Format as +962 XX XXX XXXX for Jordan\r\n  if (cleaned.startsWith('962')) {\r\n    return `+${cleaned.substring(0, 3)} ${cleaned.substring(3, 5)} ${cleaned.substring(5, 8)} ${cleaned.substring(8)}`;\r\n  }\r\n  \r\n  return phoneNumber;\r\n};\r\n\r\nexport const validateEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePhoneNumber = (phoneNumber) => {\r\n  const phoneRegex = /^(\\+962|962|0)?[0-9]{9}$/;\r\n  return phoneRegex.test(phoneNumber.replace(/\\s/g, ''));\r\n};\r\n\r\nexport const formatBalance = (balance) => {\r\n  if (balance >= 1000000) {\r\n    return (balance / 1000000).toFixed(1) + 'M';\r\n  } else if (balance >= 1000) {\r\n    return (balance / 1000).toFixed(1) + 'K';\r\n  }\r\n  return balance.toFixed(2);\r\n};\r\n\r\nexport const calculatePercentageChange = (current, previous) => {\r\n  if (previous === 0) return 0;\r\n  return ((current - previous) / previous) * 100;\r\n};\r\n\r\nexport const getTimeAgo = (dateString) => {\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffInSeconds = Math.floor((now - date) / 1000);\r\n  \r\n  if (diffInSeconds < 60) {\r\n    return 'Just now';\r\n  } else if (diffInSeconds < 3600) {\r\n    const minutes = Math.floor(diffInSeconds / 60);\r\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n  } else if (diffInSeconds < 86400) {\r\n    const hours = Math.floor(diffInSeconds / 3600);\r\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n  } else {\r\n    const days = Math.floor(diffInSeconds / 86400);\r\n    return `${days} day${days > 1 ? 's' : ''} ago`;\r\n  }\r\n};\r\n\r\nexport const generateTransactionId = () => {\r\n  return 'TXN_' + Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const formatNumber = (number, decimals = 2) => {\r\n  return Number(number).toLocaleString('en-US', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals,\r\n  });\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,cAAc,GAAGA,CAACC,MAAM,EAAEC,QAAQ,GAAG,IAAI,KAAK;EACzD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IAC/CC,KAAK,EAAE,UAAU;IACjBJ,QAAQ,EAAEA,QAAQ,KAAK,IAAI,GAAG,KAAK,GAAG,KAAK;IAAE;IAC7CK,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC;EAEF,IAAIN,QAAQ,KAAK,IAAI,EAAE;IACrB,OAAOC,SAAS,CAACM,MAAM,CAACR,MAAM,CAAC,CAACS,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;EACrD,CAAC,MAAM,IAAIR,QAAQ,KAAK,YAAY,EAAE;IACpC,OAAOC,SAAS,CAACM,MAAM,CAACR,MAAM,CAAC,CAACS,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;EACrD;EAEA,OAAOP,SAAS,CAACM,MAAM,CAACR,MAAM,CAAC;AACjC,CAAC;AAED,OAAO,MAAMU,UAAU,GAAIC,UAAU,IAAK;EACxC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACtCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIT,UAAU,IAAK;EAC7C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACtCE,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIV,UAAU,IAAK;EACxC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACU,kBAAkB,CAAC,OAAO,EAAE;IACtCJ,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,qBAAqB,GAAIC,IAAI,IAAK;EAC7C,MAAMC,KAAK,GAAG;IACZC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE,UAAU;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACD,OAAOJ,KAAK,CAACD,IAAI,CAAC,IAAIA,IAAI;AAC5B,CAAC;AAED,OAAO,MAAMM,uBAAuB,GAAIC,MAAM,IAAK;EACjD,MAAMC,QAAQ,GAAG;IACfC,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE,WAAW;IACtBC,MAAM,EAAE;EACV,CAAC;EACD,OAAOH,QAAQ,CAACD,MAAM,CAAC,IAAIA,MAAM;AACnC,CAAC;AAED,OAAO,MAAMK,kBAAkB,GAAIZ,IAAI,IAAK;EAC1C,MAAMa,KAAK,GAAG;IACZX,OAAO,EAAE,GAAG;IACZC,UAAU,EAAE,GAAG;IACfC,QAAQ,EAAE,GAAG;IACbC,QAAQ,EAAE;EACZ,CAAC;EACD,OAAOQ,KAAK,CAACb,IAAI,CAAC,IAAI,GAAG;AAC3B,CAAC;AAED,OAAO,MAAMc,mBAAmB,GAAId,IAAI,IAAK;EAC3C,MAAMe,MAAM,GAAG;IACbb,OAAO,EAAE,gBAAgB;IACzBC,UAAU,EAAE,cAAc;IAC1BC,QAAQ,EAAE,eAAe;IACzBC,QAAQ,EAAE;EACZ,CAAC;EACD,OAAOU,MAAM,CAACf,IAAI,CAAC,IAAI,eAAe;AACxC,CAAC;AAED,OAAO,MAAMgB,cAAc,GAAIT,MAAM,IAAK;EACxC,MAAMQ,MAAM,GAAG;IACbL,SAAS,EAAE,6BAA6B;IACxCD,OAAO,EAAE,+BAA+B;IACxCE,MAAM,EAAE;EACV,CAAC;EACD,OAAOI,MAAM,CAACR,MAAM,CAAC,IAAI,2BAA2B;AACtD,CAAC;AAED,OAAO,MAAMU,cAAc,GAAGA,CAACC,GAAG,EAAEC,MAAM,GAAG,EAAE,KAAK;EAClD,IAAID,GAAG,CAACC,MAAM,IAAIA,MAAM,EAAE,OAAOD,GAAG;EACpC,OAAOA,GAAG,CAACE,SAAS,CAAC,CAAC,EAAED,MAAM,CAAC,GAAG,KAAK;AACzC,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAIC,WAAW,IAAK;EAChD,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;;EAE3B;EACA,MAAMC,OAAO,GAAGD,WAAW,CAACrC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAE9C;EACA,IAAIsC,OAAO,CAACC,UAAU,CAAC,KAAK,CAAC,EAAE;IAC7B,OAAO,IAAID,OAAO,CAACH,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIG,OAAO,CAACH,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIG,OAAO,CAACH,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIG,OAAO,CAACH,SAAS,CAAC,CAAC,CAAC,EAAE;EACpH;EAEA,OAAOE,WAAW;AACpB,CAAC;AAED,OAAO,MAAMG,aAAa,GAAIC,KAAK,IAAK;EACtC,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAIP,WAAW,IAAK;EAClD,MAAMQ,UAAU,GAAG,0BAA0B;EAC7C,OAAOA,UAAU,CAACF,IAAI,CAACN,WAAW,CAACrC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACxD,CAAC;AAED,OAAO,MAAM8C,aAAa,GAAIC,OAAO,IAAK;EACxC,IAAIA,OAAO,IAAI,OAAO,EAAE;IACtB,OAAO,CAACA,OAAO,GAAG,OAAO,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EAC7C,CAAC,MAAM,IAAID,OAAO,IAAI,IAAI,EAAE;IAC1B,OAAO,CAACA,OAAO,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EAC1C;EACA,OAAOD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;EAC9D,IAAIA,QAAQ,KAAK,CAAC,EAAE,OAAO,CAAC;EAC5B,OAAQ,CAACD,OAAO,GAAGC,QAAQ,IAAIA,QAAQ,GAAI,GAAG;AAChD,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIlD,UAAU,IAAK;EACxC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,MAAMmD,GAAG,GAAG,IAAIjD,IAAI,CAAC,CAAC;EACtB,MAAMkD,aAAa,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,GAAG,GAAGlD,IAAI,IAAI,IAAI,CAAC;EAErD,IAAImD,aAAa,GAAG,EAAE,EAAE;IACtB,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIA,aAAa,GAAG,IAAI,EAAE;IAC/B,MAAMG,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,EAAE,CAAC;IAC9C,OAAO,GAAGG,OAAO,UAAUA,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EACzD,CAAC,MAAM,IAAIH,aAAa,GAAG,KAAK,EAAE;IAChC,MAAMI,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,IAAI,CAAC;IAC9C,OAAO,GAAGI,KAAK,QAAQA,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EACnD,CAAC,MAAM;IACL,MAAMC,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,KAAK,CAAC;IAC9C,OAAO,GAAGK,IAAI,OAAOA,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EAChD;AACF,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzC,OAAO,MAAM,GAAGxD,IAAI,CAACiD,GAAG,CAAC,CAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC,GAAGN,IAAI,CAACO,MAAM,CAAC,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AACnF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACC,MAAM,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACpD,OAAOC,MAAM,CAACF,MAAM,CAAC,CAACG,cAAc,CAAC,OAAO,EAAE;IAC5CvE,qBAAqB,EAAEqE,QAAQ;IAC/BpE,qBAAqB,EAAEoE;EACzB,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}